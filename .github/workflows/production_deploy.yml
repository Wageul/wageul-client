name: production Deploy
on:
  push:
    branches:
      - feature/1-git-action-cicd
env:
  DOCKERHUB_USERNAME: ywonchae1
  DOCKERHUB_IMAGE_NAME: wageul79-client

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    environment: PROD
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          # Version Spec of the version to use in SemVer notation.
          # It also emits such aliases as lts, latest, nightly and canary builds
          # Examples: 12.x, 10.15.1, >=10.15.0, lts/Hydrogen, 16-nightly, latest, node
          node-version: '20'

      - name: Check Node v
        run: node -v

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: |
          npm run build

      # Dockerhub 로그인
      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # Docker 메타데이터 추출
      - name: Extract Docker metadata
        id: metadata
        uses: docker/metadata-action@v5.5.0
        env:
          DOCKERHUB_IMAGE_FULL_NAME: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE_NAME }}
        with:
          images: ${{ env.DOCKERHUB_IMAGE_FULL_NAME }}
          tags:
            ${{ github.run_number }}
          flavor: |
            latest=false

      # Docker 이미지 빌드 및 도커허브로 푸시
      - name: Docker Build and Push
        uses: docker/build-push-action@v6.0.1
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}

      # 서버로 docker-compose 파일 전송
      - name: Copy docker-compose file to EC2
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USERNAME }}
          remote_key: ${{ secrets.EC2_PRIVATE_KEY }}
          path: docker-compose.yml
          remote_path: /home/${{ secrets.EC2_USERNAME }}/client/

      # 환경변수 적용
      - name: Set environment variables
        run: |
          echo "DEPLOYED_API_URL=${{ secrets.DEPLOYED_API_URL }}" >> .env.local
          echo "NEXT_PUBLIC_DEPLOYED_API_URL=${{ secrets.NEXT_PUBLIC_DEPLOYED_API_URL }}" >> .env.local
          echo "LOCAL_API_URL=${{ secrets.LOCAL_API_URL }}" >> .env.local
          echo "NEXT_PUBLIC_LOCAL_API_URL=${{ secrets.NEXT_PUBLIC_LOCAL_API_URL }}" >> .env.local

      # 서버로 .env 파일 전송
      - name: Copy .env file to EC2
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USERNAME }}
          remote_key: ${{ secrets.EC2_PRIVATE_KEY }}
          path: .env.local
          remote_path: /home/${{ secrets.EC2_USERNAME }}/client/

      # EC2로 배포
      - name: Deploy to EC2 Server
        uses: appleboy/ssh-action@master
        env:
          IMAGE_FULL_URL: ${{ steps.metadata.outputs.tags }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: IMAGE_FULL_URL, DOCKERHUB_IMAGE_NAME # docker-compose.yml 에서 사용할 환경 변수
          script: |
            cd client/
            echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
            docker compose up -f docker-compose.yml --build -d
            docker image prune -a -f